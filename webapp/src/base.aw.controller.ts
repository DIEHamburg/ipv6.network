// DO NOT EDIT THIS FILE
type AWLightDarkMode = DarkLighMode;
enum DarkLighMode {
    'light' = 'light',
    'dark'  = 'dark'
}
interface AWConfig {
    "app": {
        "successMsgColor": string,
        "errorMsgColor": string,
        "standardLightOrDarkMode": DarkLighMode
    },
    "settings": {
        "api": {
            "url": string
        },
        "loadingScreen": {
            "custom": boolean,
            "autoDisabledOnLoadPages": string[]
        }
    }
}
namespace AW.Base {
    _onInit();

    /**
     * @private
     * @template
     * @async
     * @method inits the page
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 05.12.2023
     */
    async function _onInit () {
        
        loadPageController();
        loadLightOrDarkMode();
    }

    /**
     * @private
     * @template
     * @method loads the page controller which are needed & disables the loading screen after load
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 15.12.2023
     */
    function loadPageController () {
        let script      = document.createElement("script"),
            path        = window.location.pathname,
            pathsArr    = path.split('/');

        // individually page controller include
        script  = document.createElement("script");
        path    = pathsArr[pathsArr.length - 1];
        if (path === '') {
            path = 'index';
        } else {
            // path = path.split(".html")[0];
            // ONE PAGE EXCLUSIVE!
            path = 'index';
        }
        script.src      = `./${path}.controller.js`
        script.defer    = true
        script.async    = false;
        script.addEventListener("load", async () => {
            loading(false);
        });
        document.head.appendChild(script);
    }

    /**
     * @private
     * @template
     * @method loads the dark or light mode. If no mode set the mode is lightmode
     * @example AW.Base.loadLightOrDarkMode()
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 06.12.2023
     */
    async function loadLightOrDarkMode () {
        let mode                = window.localStorage.getItem('LModeODMode') as AWLightDarkMode,
            link                = document.createElement('link'),
            allStyleIndicators  = document.getElementsByClassName('aw_allLighOrDarkModeIndicators') as HTMLCollectionOf<HTMLLinkElement>,
            loopCounter         = allStyleIndicators.length

        if (loopCounter !== 0) {
            // -> mode links already exists -> delete them
            for (let i = 0; i < loopCounter; i++) {
                allStyleIndicators[0].remove();
            }
        }

        if (!mode) {
            // -> no mode selected -> set standard mode (lightmode)
            mode = DarkLighMode.light;
            window.localStorage.setItem('LModeODMode', mode);
        }

        if (mode === 'dark') {
            // -> darkmode active
            link.href = `./${mode}.style.css`
        } else {
            // -> lightmode active
            link.href = `./${mode}.style.css`
        }

        link.type = 'text/css';
        link.rel = 'stylesheet'
        link.classList.add('aw_allLighOrDarkModeIndicators');
        document.head.appendChild(link);
    }

    /**
     * @public
     * @template
     * @method changes the dark / light mode and refreshes the mode at the end
     * @param {AWLightDarkMode} mode the indicator which mode should be set
     * @example AW.Base.changeLightOrDarkMode(DarkLighMode.light)
     * @example AW.Base.changeLightOrDarkMode() // empty = change mode to other one
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 06.12.2023
     */
    export function changeLightOrDarkMode (mode?: AWLightDarkMode) {
        switch (mode) {
            case 'light':
                // -> set to lightmode
                window.localStorage.setItem("LModeODMode", "light");
                break;

            case 'dark':
                // -> set to darkmode
                window.localStorage.setItem("LModeODMode", "dark");
                break;
        
            default:
                // -> no mode set -> get mode and set the other one
                const oldMode = window.localStorage.getItem("LModeODMode") as AWLightDarkMode;
                if (oldMode === 'dark') {
                    window.localStorage.setItem("LModeODMode", "light");
                } else {
                    window.localStorage.setItem("LModeODMode", "dark");
                }
                break;
        }
        // refresh mode
        loadLightOrDarkMode();
    }

    /**
     * @public
     * @template
     * @method stores the user / login information in localStorage
     * @param {string} accessToken token for login
     * @param {{}} userData userData you want to store
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 12.12.2023
     */
    export function storeUserData (accessToken: string, userData: {}) {
        window.localStorage.setItem("access_token", accessToken);
        window.localStorage.setItem("userData", JSON.stringify(userData));
        window.localStorage.setItem('lastLoginDate', String(new Date));
    }

    /**
     * @public
     * @template
     * @method gets the user data
     * @returns {{} | undefined} returns userData if exists
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 12.12.2023
     */
    export function getUserData (): {} | undefined {
        const userData = window.localStorage.getItem("userData");
        if (userData) {
            return JSON.parse(userData);
        } else {
            return undefined;
        }
    }

    /**
     * @public
     * @template
     * @method changes the loading screen visibility
     * @param {boolean} state should be the loading screen visible?
     * @example AW.Base.loading(true) // enables the loading screen
     * @example AW.Base.loading(false) // disables the loading screen
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 07.12.2023
     */
    export function loading(state: boolean) {
        const loadingScreens = document.getElementsByClassName("loadingScreen") as HTMLCollectionOf<HTMLDivElement>;
        for (let i = 0; i < loadingScreens.length; i++) {
            const e = loadingScreens[i];
            if (state) {
                e.style.display = 'block';
            }
            else {
                e.style.display = 'none';
            }
        }
    }

    /**
     * @public
     * @template
     * @method shows a message error | success
     * @param {string} contentsText the text you want to display
     * @param {boolean} state true: success | false: error
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 12.01.2024
     */
    export async function showMessage (contentsText: string, state: boolean) {
        const   dialogBox   = document.getElementById("aw_successErrorDialogBox") as HTMLDialogElement,
                modalHeader = document.getElementsByClassName('aw_successErrorMsgBoxModal-header')[0] as HTMLDivElement,
                headerTitle = document.getElementById('aw_successErrorDialogBoxHeader') as HTMLHeadElement;

        if (state === false) {
            modalHeader.style.backgroundColor = "#bd2121";
        } else if (state === true){
            modalHeader.style.backgroundColor = "#21bd2b";
        }
        headerTitle.innerHTML = contentsText;
        dialogBox.style.display = "block";
        dialogBox.showModal();
    }

    /**
     * @public
     * @template
     * @method closes the success / error dialog msg
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 12.01.2024
     */
    export function onCloseAWSuccessErrorDialogBox () {
        const dialogBox = document.getElementById("aw_successErrorDialogBox") as HTMLDivElement;
        
        dialogBox.style.display = "none";
        AW.Base.onCloseDialog('aw_successErrorDialogBox');
    }

    /**
     * @public
     * @template
     * @method closes the dialog
     * @param {string} id the dialog id you want to close
     * @author DerEineFlow
     * @memberof AW_Crew
     * @date 12.01.2024
     */
    export function onCloseDialog (id: string) {
        const dialog = document.getElementById(id) as HTMLDialogElement;
        if (dialog) {
            dialog.close();
        }
    }
}
// DO NOT EDIT THIS FILE